
paska.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000060c  00000680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000de3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b86  00000000  00000000  00000fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fc  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002af6  00000000  00000000  0000343c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000354  00000000  00000000  00005f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000b519  00000000  00000000  00006288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df7  00000000  00000000  000117a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00012598  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000032ae  00000000  00000000  00012708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	83 c2       	rjmp	.+1286   	; 0x53c <__vector_13>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	94 d0       	rcall	.+296    	; 0x18a <main>
  62:	d2 c2       	rjmp	.+1444   	; 0x608 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <I2C_init>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char I2C_Rep_Start(unsigned char address)
{
    return I2C_Start( address );
  66:	11 b8       	out	0x01, r1	; 1
  68:	8a e2       	ldi	r24, 0x2A	; 42
  6a:	80 b9       	out	0x00, r24	; 0
  6c:	08 95       	ret

0000006e <I2C_Start>:
  6e:	94 ea       	ldi	r25, 0xA4	; 164
  70:	96 bf       	out	0x36, r25	; 54
  72:	95 b3       	in	r25, 0x15	; 21
  74:	93 60       	ori	r25, 0x03	; 3
  76:	95 bb       	out	0x15, r25	; 21
  78:	06 b6       	in	r0, 0x36	; 54
  7a:	07 fe       	sbrs	r0, 7
  7c:	fd cf       	rjmp	.-6      	; 0x78 <I2C_Start+0xa>
  7e:	91 b1       	in	r25, 0x01	; 1
  80:	98 7f       	andi	r25, 0xF8	; 248
  82:	98 30       	cpi	r25, 0x08	; 8
  84:	21 f0       	breq	.+8      	; 0x8e <I2C_Start+0x20>
  86:	90 31       	cpi	r25, 0x10	; 16
  88:	11 f0       	breq	.+4      	; 0x8e <I2C_Start+0x20>
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	08 95       	ret
  8e:	83 b9       	out	0x03, r24	; 3
  90:	84 e8       	ldi	r24, 0x84	; 132
  92:	86 bf       	out	0x36, r24	; 54
  94:	06 b6       	in	r0, 0x36	; 54
  96:	07 fe       	sbrs	r0, 7
  98:	fd cf       	rjmp	.-6      	; 0x94 <I2C_Start+0x26>
  9a:	81 b1       	in	r24, 0x01	; 1
  9c:	88 7f       	andi	r24, 0xF8	; 248
  9e:	88 31       	cpi	r24, 0x18	; 24
  a0:	11 f0       	breq	.+4      	; 0xa6 <I2C_Start+0x38>
  a2:	80 34       	cpi	r24, 0x40	; 64
  a4:	91 f7       	brne	.-28     	; 0x8a <I2C_Start+0x1c>
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	08 95       	ret

000000aa <I2C_Stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void I2C_Stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  aa:	84 e9       	ldi	r24, 0x94	; 148
  ac:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
  ae:	06 b6       	in	r0, 0x36	; 54
  b0:	04 fc       	sbrc	r0, 4
  b2:	fd cf       	rjmp	.-6      	; 0xae <I2C_Stop+0x4>

}/* I2C_Stop */
  b4:	08 95       	ret

000000b6 <I2C_Write>:
*************************************************************************/
unsigned char I2C_Write(unsigned char data)
{	
    uint8_t   twst;
	// send data to the previously addressed device
	TWDR = data;
  b6:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
  b8:	84 e8       	ldi	r24, 0x84	; 132
  ba:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
  bc:	06 b6       	in	r0, 0x36	; 54
  be:	07 fe       	sbrs	r0, 7
  c0:	fd cf       	rjmp	.-6      	; 0xbc <I2C_Write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
  c2:	91 b1       	in	r25, 0x01	; 1
  c4:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	98 32       	cpi	r25, 0x28	; 40
  ca:	09 f4       	brne	.+2      	; 0xce <I2C_Write+0x18>
  cc:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* I2C_Write */
  ce:	08 95       	ret

000000d0 <togle_EN>:
	
	I2C_Stop();
}

void togle_EN(uint8_t data, uint8_t RS_En)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	1f 92       	push	r1
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
	I2C_Write(data | Backlight | En | RS_En);
  da:	68 2b       	or	r22, r24
  dc:	86 2f       	mov	r24, r22
  de:	8c 60       	ori	r24, 0x0C	; 12
  e0:	69 83       	std	Y+1, r22	; 0x01
  e2:	e9 df       	rcall	.-46     	; 0xb6 <I2C_Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <togle_EN+0x16>
	_delay_us(1);
	I2C_Write((data | Backlight | RS_En) & ~En);
  ea:	69 81       	ldd	r22, Y+1	; 0x01
  ec:	86 2f       	mov	r24, r22
  ee:	83 7f       	andi	r24, 0xF3	; 243
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	e1 df       	rcall	.-62     	; 0xb6 <I2C_Write>
  f4:	80 e1       	ldi	r24, 0x10	; 16
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <togle_EN+0x26>
	_delay_us(50);
}
  fa:	0f 90       	pop	r0
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <LCD_Write>:
	
	LCD_Write(0b00001100, 0);	//Set cursor options
}

void LCD_Write(unsigned char data, uint8_t RS_En)
{
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	c8 2f       	mov	r28, r24
 10a:	16 2f       	mov	r17, r22
	I2C_Start(LCD_Address);
 10c:	8e e4       	ldi	r24, 0x4E	; 78
 10e:	af df       	rcall	.-162    	; 0x6e <I2C_Start>
	
	//*****Write Upper Four Bits*****
	I2C_Write((data & 0xF0) | Backlight | RS_En);
 110:	dc 2f       	mov	r29, r28
 112:	d0 7f       	andi	r29, 0xF0	; 240
 114:	8d 2f       	mov	r24, r29
 116:	81 2b       	or	r24, r17
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	cd df       	rcall	.-102    	; 0xb6 <I2C_Write>
	togle_EN(data & 0xF0, RS_En);
 11c:	61 2f       	mov	r22, r17
 11e:	8d 2f       	mov	r24, r29
 120:	d7 df       	rcall	.-82     	; 0xd0 <togle_EN>
	
	//*****Write Lower Four Bits*****
	I2C_Write(((data << 4) & 0xF0) | Backlight | RS_En);
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	c8 9f       	mul	r28, r24
 126:	e0 01       	movw	r28, r0
 128:	11 24       	eor	r1, r1
 12a:	ce 01       	movw	r24, r28
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	81 2b       	or	r24, r17
 130:	c2 df       	rcall	.-124    	; 0xb6 <I2C_Write>
	togle_EN((data << 4) & 0xF0, RS_En);
 132:	61 2f       	mov	r22, r17
 134:	8c 2f       	mov	r24, r28
 136:	cc df       	rcall	.-104    	; 0xd0 <togle_EN>
	
	I2C_Stop();
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
	
	//*****Write Lower Four Bits*****
	I2C_Write(((data << 4) & 0xF0) | Backlight | RS_En);
	togle_EN((data << 4) & 0xF0, RS_En);
	
	I2C_Stop();
 13e:	b5 cf       	rjmp	.-150    	; 0xaa <I2C_Stop>

00000140 <LCD_init>:
#include "LCD_Disp.h"
#include "I2C.h"


void LCD_init()
{
 140:	cf 93       	push	r28
	I2C_init();	//Initialize I2C protocol
 142:	91 df       	rcall	.-222    	; 0x66 <I2C_init>
	
	//*****Init Three Times*****
	LCD_Write(0x03, 0);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	dc df       	rcall	.-72     	; 0x102 <LCD_Write>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 14a:	82 ee       	ldi	r24, 0xE2	; 226
 14c:	94 e0       	ldi	r25, 0x04	; 4
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_init+0xe>
	_delay_ms(5);
	LCD_Write(0x03, 0);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	d5 df       	rcall	.-86     	; 0x102 <LCD_Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 158:	c2 e3       	ldi	r28, 0x32	; 50
 15a:	8c 2f       	mov	r24, r28
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_init+0x1c>
	_delay_us(150);
	LCD_Write(0x03, 0);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	ce df       	rcall	.-100    	; 0x102 <LCD_Write>
 166:	ca 95       	dec	r28
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_init+0x26>
	_delay_us(150);
	
	LCD_Write(0x02, 0);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	c9 df       	rcall	.-110    	; 0x102 <LCD_Write>
	
	LCD_Write(0b00101000, 0);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	88 e2       	ldi	r24, 0x28	; 40
 174:	c6 df       	rcall	.-116    	; 0x102 <LCD_Write>

	LCD_Write(0b00001000, 0);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	88 e0       	ldi	r24, 0x08	; 8
 17a:	c3 df       	rcall	.-122    	; 0x102 <LCD_Write>
	
	LCD_Write(0b00000001, 0);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	c0 df       	rcall	.-128    	; 0x102 <LCD_Write>
	
	LCD_Write(0b00001100, 0);	//Set cursor options
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	8c e0       	ldi	r24, 0x0C	; 12
}
 186:	cf 91       	pop	r28

	LCD_Write(0b00001000, 0);
	
	LCD_Write(0b00000001, 0);
	
	LCD_Write(0b00001100, 0);	//Set cursor options
 188:	bc cf       	rjmp	.-136    	; 0x102 <LCD_Write>

0000018a <main>:
#include <util/delay.h>
#define __DELAY_BACKWARD_COMPATIBLE__ 


int main(void)
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	00 d0       	rcall	.+0      	; 0x190 <main+0x6>
 190:	00 d0       	rcall	.+0      	; 0x192 <main+0x8>
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
	//*******Initialize External Hardware*******
	//LED_init();
	IR_init();
 196:	60 d1       	rcall	.+704    	; 0x458 <IR_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	83 ec       	ldi	r24, 0xC3	; 195
 19a:	99 e0       	ldi	r25, 0x09	; 9
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0x12>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x18>
 1a2:	00 00       	nop
	//I2C_init();
	_delay_ms(10);
	LCD_init();
 1a4:	cd df       	rcall	.-102    	; 0x140 <LCD_init>
	UART_init(12);
 1a6:	8c e0       	ldi	r24, 0x0C	; 12
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	b8 d1       	rcall	.+880    	; 0x51c <UART_init>
	//******************************************
	
	
	//***************Define Ports***************
	DDRA &= 0b11000000;
 1ac:	8a b3       	in	r24, 0x1a	; 26
 1ae:	80 7c       	andi	r24, 0xC0	; 192
 1b0:	8a bb       	out	0x1a, r24	; 26
	//PORTA &= 0b11000000;
	DDRB |= 0b00011111;
 1b2:	87 b3       	in	r24, 0x17	; 23
 1b4:	8f 61       	ori	r24, 0x1F	; 31
 1b6:	87 bb       	out	0x17, r24	; 23
	PORTB &= 0b11100000;
 1b8:	88 b3       	in	r24, 0x18	; 24
 1ba:	80 7e       	andi	r24, 0xE0	; 224
 1bc:	88 bb       	out	0x18, r24	; 24
	DDRD |= 0b00111100;
 1be:	81 b3       	in	r24, 0x11	; 17
 1c0:	8c 63       	ori	r24, 0x3C	; 60
 1c2:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0b00111100;
 1c4:	82 b3       	in	r24, 0x12	; 18
 1c6:	8c 63       	ori	r24, 0x3C	; 60
 1c8:	82 bb       	out	0x12, r24	; 18
 1ca:	9f e3       	ldi	r25, 0x3F	; 63
 1cc:	ed e0       	ldi	r30, 0x0D	; 13
 1ce:	f3 e0       	ldi	r31, 0x03	; 3
 1d0:	91 50       	subi	r25, 0x01	; 1
 1d2:	e0 40       	sbci	r30, 0x00	; 0
 1d4:	f0 40       	sbci	r31, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x46>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x50>
 1da:	00 00       	nop
	int prev_alt = 12;
	
	unsigned char highPitch = 0;
	unsigned char lowPitch = 0;
	unsigned char highRoll = 0;
	unsigned char lowRoll = 0;
 1dc:	70 e0       	ldi	r23, 0x00	; 0
	int altitude;
	int prev_alt = 12;
	
	unsigned char highPitch = 0;
	unsigned char lowPitch = 0;
	unsigned char highRoll = 0;
 1de:	40 e0       	ldi	r20, 0x00	; 0
	
	int altitude;
	int prev_alt = 12;
	
	unsigned char highPitch = 0;
	unsigned char lowPitch = 0;
 1e0:	60 e0       	ldi	r22, 0x00	; 0
	uint16_t aux1 = minPWM;
	
	int altitude;
	int prev_alt = 12;
	
	unsigned char highPitch = 0;
 1e2:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t pitch = midPitch;
	uint16_t yaw = midYaw;
	uint16_t aux1 = minPWM;
	
	int altitude;
	int prev_alt = 12;
 1e4:	9c e0       	ldi	r25, 0x0C	; 12
 1e6:	a9 2e       	mov	r10, r25
 1e8:	b1 2c       	mov	r11, r1
	
	
	//*************Define Variables*************
	uint16_t throttle = minPWM;
	uint16_t roll = midRoll;
	uint16_t pitch = midPitch;
 1ea:	06 e7       	ldi	r16, 0x76	; 118
 1ec:	15 e0       	ldi	r17, 0x05	; 5
	//******************************************
	
	
	//*************Define Variables*************
	uint16_t throttle = minPWM;
	uint16_t roll = midRoll;
 1ee:	26 ec       	ldi	r18, 0xC6	; 198
 1f0:	82 2e       	mov	r8, r18
 1f2:	25 e0       	ldi	r18, 0x05	; 5
 1f4:	92 2e       	mov	r9, r18
	PORTD |= 0b00111100;
	//******************************************
	
	
	//*************Define Variables*************
	uint16_t throttle = minPWM;
 1f6:	38 ee       	ldi	r19, 0xE8	; 232
 1f8:	e3 2e       	mov	r14, r19
 1fa:	33 e0       	ldi	r19, 0x03	; 3
 1fc:	f3 2e       	mov	r15, r19
 1fe:	89 e6       	ldi	r24, 0x69	; 105
 200:	98 e1       	ldi	r25, 0x18	; 24
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <main+0x78>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x7e>
 208:	00 00       	nop
	
	while(1)
	{	
		_delay_ms(25);
		
		altitude = US_Read_ADC();
 20a:	4b 83       	std	Y+3, r20	; 0x03
 20c:	59 83       	std	Y+1, r21	; 0x01
 20e:	6a 83       	std	Y+2, r22	; 0x02
 210:	7c 83       	std	Y+4, r23	; 0x04
 212:	bc d1       	rcall	.+888    	; 0x58c <US_Read_ADC>
 214:	6c 01       	movw	r12, r24
				
		if(altitude >= setAltitude && throttle <= maxThrottle && prev_alt >= altitude)
 216:	4b 81       	ldd	r20, Y+3	; 0x03
 218:	59 81       	ldd	r21, Y+1	; 0x01
 21a:	6a 81       	ldd	r22, Y+2	; 0x02
 21c:	7c 81       	ldd	r23, Y+4	; 0x04
 21e:	9c e4       	ldi	r25, 0x4C	; 76
 220:	c9 16       	cp	r12, r25
 222:	d1 04       	cpc	r13, r1
 224:	84 f0       	brlt	.+32     	; 0x246 <main+0xbc>
 226:	e9 e7       	ldi	r30, 0x79	; 121
 228:	ee 16       	cp	r14, r30
 22a:	e5 e0       	ldi	r30, 0x05	; 5
 22c:	fe 06       	cpc	r15, r30
 22e:	38 f4       	brcc	.+14     	; 0x23e <main+0xb4>
 230:	ac 14       	cp	r10, r12
 232:	bd 04       	cpc	r11, r13
 234:	24 f0       	brlt	.+8      	; 0x23e <main+0xb4>
		{
			throttle += 10;	
 236:	fa e0       	ldi	r31, 0x0A	; 10
 238:	ef 0e       	add	r14, r31
 23a:	f1 1c       	adc	r15, r1
 23c:	0f c0       	rjmp	.+30     	; 0x25c <main+0xd2>
		}
		else if(altitude <= setAltitude && throttle >= minThrottle && prev_alt <= altitude)
 23e:	2c e4       	ldi	r18, 0x4C	; 76
 240:	c2 16       	cp	r12, r18
 242:	d1 04       	cpc	r13, r1
 244:	59 f4       	brne	.+22     	; 0x25c <main+0xd2>
 246:	80 eb       	ldi	r24, 0xB0	; 176
 248:	e8 16       	cp	r14, r24
 24a:	84 e0       	ldi	r24, 0x04	; 4
 24c:	f8 06       	cpc	r15, r24
 24e:	30 f0       	brcs	.+12     	; 0x25c <main+0xd2>
 250:	ca 14       	cp	r12, r10
 252:	db 04       	cpc	r13, r11
 254:	1c f0       	brlt	.+6      	; 0x25c <main+0xd2>
		{
			throttle -= 10;	
 256:	9a e0       	ldi	r25, 0x0A	; 10
 258:	e9 1a       	sub	r14, r25
 25a:	f1 08       	sbc	r15, r1
		}
			
		prev_alt = altitude;

		switch(Obstacle_Detect())
 25c:	4b 83       	std	Y+3, r20	; 0x03
 25e:	59 83       	std	Y+1, r21	; 0x01
 260:	6a 83       	std	Y+2, r22	; 0x02
 262:	7c 83       	std	Y+4, r23	; 0x04
 264:	fe d0       	rcall	.+508    	; 0x462 <Obstacle_Detect>
 266:	4b 81       	ldd	r20, Y+3	; 0x03
 268:	59 81       	ldd	r21, Y+1	; 0x01
 26a:	6a 81       	ldd	r22, Y+2	; 0x02
 26c:	7c 81       	ldd	r23, Y+4	; 0x04
 26e:	87 30       	cpi	r24, 0x07	; 7
 270:	79 f1       	breq	.+94     	; 0x2d0 <main+0x146>
 272:	84 f4       	brge	.+32     	; 0x294 <main+0x10a>
 274:	83 30       	cpi	r24, 0x03	; 3
 276:	61 f1       	breq	.+88     	; 0x2d0 <main+0x146>
 278:	44 f4       	brge	.+16     	; 0x28a <main+0x100>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	e1 f1       	breq	.+120    	; 0x2f6 <main+0x16c>
 27e:	0c f0       	brlt	.+2      	; 0x282 <main+0xf8>
 280:	40 c0       	rjmp	.+128    	; 0x302 <main+0x178>
 282:	88 23       	and	r24, r24
 284:	09 f4       	brne	.+2      	; 0x288 <main+0xfe>
 286:	40 c0       	rjmp	.+128    	; 0x308 <main+0x17e>
 288:	8a c0       	rjmp	.+276    	; 0x39e <main+0x214>
 28a:	85 30       	cpi	r24, 0x05	; 5
 28c:	09 f4       	brne	.+2      	; 0x290 <main+0x106>
 28e:	58 c0       	rjmp	.+176    	; 0x340 <main+0x1b6>
 290:	ec f4       	brge	.+58     	; 0x2cc <main+0x142>
 292:	1e c0       	rjmp	.+60     	; 0x2d0 <main+0x146>
 294:	8b 30       	cpi	r24, 0x0B	; 11
 296:	41 f1       	breq	.+80     	; 0x2e8 <main+0x15e>
 298:	24 f4       	brge	.+8      	; 0x2a2 <main+0x118>
 29a:	89 30       	cpi	r24, 0x09	; 9
 29c:	09 f1       	breq	.+66     	; 0x2e0 <main+0x156>
 29e:	14 f5       	brge	.+68     	; 0x2e4 <main+0x15a>
 2a0:	23 c0       	rjmp	.+70     	; 0x2e8 <main+0x15e>
 2a2:	8d 30       	cpi	r24, 0x0D	; 13
 2a4:	41 f1       	breq	.+80     	; 0x2f6 <main+0x16c>
 2a6:	6c f1       	brlt	.+90     	; 0x302 <main+0x178>
 2a8:	8e 30       	cpi	r24, 0x0E	; 14
 2aa:	59 f1       	breq	.+86     	; 0x302 <main+0x178>
 2ac:	8f 30       	cpi	r24, 0x0F	; 15
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <main+0x128>
 2b0:	76 c0       	rjmp	.+236    	; 0x39e <main+0x214>
 2b2:	2a c0       	rjmp	.+84     	; 0x308 <main+0x17e>
				if(highRoll)
				{
					roll = midRoll - offset;
					highRoll --;
				}
				else if(lowRoll)
 2b4:	77 23       	and	r23, r23
 2b6:	09 f4       	brne	.+2      	; 0x2ba <main+0x130>
 2b8:	64 c0       	rjmp	.+200    	; 0x382 <main+0x1f8>
				{
					roll = midRoll + offset;
					lowRoll --;
 2ba:	70 e0       	ldi	r23, 0x00	; 0
				{
					roll = midRoll;
				}
				
				pitch = midPitch + offset;
				highPitch = count;
 2bc:	51 e0       	ldi	r21, 0x01	; 1
				else
				{
					roll = midRoll;
				}
				
				pitch = midPitch + offset;
 2be:	00 e2       	ldi	r16, 0x20	; 32
 2c0:	16 e0       	ldi	r17, 0x06	; 6
					roll = midRoll - offset;
					highRoll --;
				}
				else if(lowRoll)
				{
					roll = midRoll + offset;
 2c2:	80 e7       	ldi	r24, 0x70	; 112
 2c4:	88 2e       	mov	r8, r24
 2c6:	86 e0       	ldi	r24, 0x06	; 6
 2c8:	98 2e       	mov	r9, r24
 2ca:	69 c0       	rjmp	.+210    	; 0x39e <main+0x214>
				lowPitch = count;
			break;
			
			case 0x06:
				roll = midRoll + offset;
				highRoll = count;
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	f6 cf       	rjmp	.-20     	; 0x2bc <main+0x132>
				highPitch = count;
			break;
			
			case 0x07:
				roll = midRoll + offset;
				highRoll = count;
 2d0:	41 e0       	ldi	r20, 0x01	; 1
				
				if(highPitch)
 2d2:	51 11       	cpse	r21, r1
 2d4:	41 c0       	rjmp	.+130    	; 0x358 <main+0x1ce>
				{
					pitch = midPitch - offset;
					highPitch --;
				}
				else if(lowPitch)
 2d6:	66 23       	and	r22, r22
 2d8:	09 f4       	brne	.+2      	; 0x2dc <main+0x152>
 2da:	42 c0       	rjmp	.+132    	; 0x360 <main+0x1d6>
				{
					pitch = midPitch + offset;
					lowPitch --;
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	ef cf       	rjmp	.-34     	; 0x2be <main+0x134>
				}
			break;
			
			case 0x09:
				roll = midRoll - offset;
				lowRoll = count;
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	49 c0       	rjmp	.+146    	; 0x376 <main+0x1ec>
				lowPitch = count;
			break;
			
			case 0x0A:
				roll = midRoll - offset;
				lowRoll = count;
 2e4:	71 e0       	ldi	r23, 0x01	; 1
 2e6:	30 c0       	rjmp	.+96     	; 0x348 <main+0x1be>
				highPitch = count;
			break;
			
			case 0x0B:
				roll = midRoll - offset;
				lowRoll = count;
 2e8:	71 e0       	ldi	r23, 0x01	; 1
				
				if(highPitch)
 2ea:	51 11       	cpse	r21, r1
 2ec:	3c c0       	rjmp	.+120    	; 0x366 <main+0x1dc>
				{
					pitch = midPitch - offset;
					highPitch --;
				}
				else if(lowPitch)
 2ee:	66 23       	and	r22, r22
 2f0:	f1 f1       	breq	.+124    	; 0x36e <main+0x1e4>
				{
					pitch = midPitch + offset;
					lowPitch --;
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	2a c0       	rjmp	.+84     	; 0x34a <main+0x1c0>
				pitch = midPitch + offset;
				highPitch = count;
			break;
			
			case 0x0D:
				if(highRoll)
 2f6:	41 11       	cpse	r20, r1
 2f8:	3d c0       	rjmp	.+122    	; 0x374 <main+0x1ea>
				{
					roll = midRoll - offset;
					highRoll --;
				}
				else if(lowRoll)
 2fa:	77 23       	and	r23, r23
 2fc:	f1 f1       	breq	.+124    	; 0x37a <main+0x1f0>
				{
					roll = midRoll + offset;
					lowRoll --;
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	20 c0       	rjmp	.+64     	; 0x342 <main+0x1b8>
				pitch= midPitch - offset;
				lowPitch = count;
			break;
			
			case 0x0E:
				if(highRoll)
 302:	41 11       	cpse	r20, r1
 304:	20 c0       	rjmp	.+64     	; 0x346 <main+0x1bc>
 306:	d6 cf       	rjmp	.-84     	; 0x2b4 <main+0x12a>
				pitch = midPitch + offset;
				highPitch = count;
			break;
			
			case 0x0F:
				if(highRoll)
 308:	41 11       	cpse	r20, r1
 30a:	08 c0       	rjmp	.+16     	; 0x31c <main+0x192>
				{
					roll = midRoll - offset;
					highRoll --;
				}
				else if(lowRoll)
 30c:	77 23       	and	r23, r23
 30e:	59 f0       	breq	.+22     	; 0x326 <main+0x19c>
				{
					roll = midRoll + offset;
					lowRoll --;
 310:	70 e0       	ldi	r23, 0x00	; 0
					roll = midRoll - offset;
					highRoll --;
				}
				else if(lowRoll)
				{
					roll = midRoll + offset;
 312:	00 e7       	ldi	r16, 0x70	; 112
 314:	80 2e       	mov	r8, r16
 316:	06 e0       	ldi	r16, 0x06	; 6
 318:	90 2e       	mov	r9, r16
 31a:	09 c0       	rjmp	.+18     	; 0x32e <main+0x1a4>
			break;
			
			case 0x0F:
				if(highRoll)
				{
					roll = midRoll - offset;
 31c:	1c e1       	ldi	r17, 0x1C	; 28
 31e:	81 2e       	mov	r8, r17
 320:	15 e0       	ldi	r17, 0x05	; 5
 322:	91 2e       	mov	r9, r17
 324:	04 c0       	rjmp	.+8      	; 0x32e <main+0x1a4>
					roll = midRoll + offset;
					lowRoll --;
				}
				else
				{
					roll = midRoll;
 326:	b6 ec       	ldi	r27, 0xC6	; 198
 328:	8b 2e       	mov	r8, r27
 32a:	b5 e0       	ldi	r27, 0x05	; 5
 32c:	9b 2e       	mov	r9, r27
				}
				
				if(highPitch)
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	51 11       	cpse	r21, r1
 332:	2f c0       	rjmp	.+94     	; 0x392 <main+0x208>
				{
					pitch = midPitch - offset;
					highPitch --;
				}
				else if(lowPitch)
 334:	66 23       	and	r22, r22
 336:	89 f1       	breq	.+98     	; 0x39a <main+0x210>
				{
					pitch = midPitch + offset;
					lowPitch --;
 338:	60 e0       	ldi	r22, 0x00	; 0
					pitch = midPitch - offset;
					highPitch --;
				}
				else if(lowPitch)
				{
					pitch = midPitch + offset;
 33a:	00 e2       	ldi	r16, 0x20	; 32
 33c:	16 e0       	ldi	r17, 0x06	; 6
 33e:	2f c0       	rjmp	.+94     	; 0x39e <main+0x214>
				}
			break;
			
			case 0x05:
				roll = midRoll + offset;
				highRoll = count;
 340:	41 e0       	ldi	r20, 0x01	; 1
				
				pitch = midPitch - offset;
				lowPitch = count;
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	0a c0       	rjmp	.+20     	; 0x35a <main+0x1d0>
			
			case 0x02:
				if(highRoll)
				{
					roll = midRoll - offset;
					highRoll --;
 346:	40 e0       	ldi	r20, 0x00	; 0
				{
					roll = midRoll;
				}
				
				pitch = midPitch + offset;
				highPitch = count;
 348:	51 e0       	ldi	r21, 0x01	; 1
				else
				{
					roll = midRoll;
				}
				
				pitch = midPitch + offset;
 34a:	00 e2       	ldi	r16, 0x20	; 32
 34c:	16 e0       	ldi	r17, 0x06	; 6
			break;
			
			case 0x02:
				if(highRoll)
				{
					roll = midRoll - offset;
 34e:	ac e1       	ldi	r26, 0x1C	; 28
 350:	8a 2e       	mov	r8, r26
 352:	a5 e0       	ldi	r26, 0x05	; 5
 354:	9a 2e       	mov	r9, r26
 356:	23 c0       	rjmp	.+70     	; 0x39e <main+0x214>
				highRoll = count;
				
				if(highPitch)
				{
					pitch = midPitch - offset;
					highPitch --;
 358:	50 e0       	ldi	r21, 0x00	; 0
				roll = midRoll + offset;
				highRoll = count;
				
				if(highPitch)
				{
					pitch = midPitch - offset;
 35a:	0c ec       	ldi	r16, 0xCC	; 204
 35c:	14 e0       	ldi	r17, 0x04	; 4
 35e:	b1 cf       	rjmp	.-158    	; 0x2c2 <main+0x138>
					pitch = midPitch + offset;
					lowPitch --;
				}
				else
				{
					pitch = midPitch;
 360:	06 e7       	ldi	r16, 0x76	; 118
 362:	15 e0       	ldi	r17, 0x05	; 5
 364:	ae cf       	rjmp	.-164    	; 0x2c2 <main+0x138>
				lowRoll = count;
				
				if(highPitch)
				{
					pitch = midPitch - offset;
					highPitch --;
 366:	50 e0       	ldi	r21, 0x00	; 0
				roll = midRoll - offset;
				lowRoll = count;
				
				if(highPitch)
				{
					pitch = midPitch - offset;
 368:	0c ec       	ldi	r16, 0xCC	; 204
 36a:	14 e0       	ldi	r17, 0x04	; 4
 36c:	f0 cf       	rjmp	.-32     	; 0x34e <main+0x1c4>
					pitch = midPitch + offset;
					lowPitch --;
				}
				else
				{
					pitch = midPitch;
 36e:	06 e7       	ldi	r16, 0x76	; 118
 370:	15 e0       	ldi	r17, 0x05	; 5
 372:	ed cf       	rjmp	.-38     	; 0x34e <main+0x1c4>
			
			case 0x0D:
				if(highRoll)
				{
					roll = midRoll - offset;
					highRoll --;
 374:	40 e0       	ldi	r20, 0x00	; 0
				{
					roll = midRoll;
				}
				
				pitch= midPitch - offset;
				lowPitch = count;
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	f7 cf       	rjmp	.-18     	; 0x368 <main+0x1de>
 37a:	61 e0       	ldi	r22, 0x01	; 1
				else
				{
					roll = midRoll;
				}
				
				pitch= midPitch - offset;
 37c:	0c ec       	ldi	r16, 0xCC	; 204
 37e:	14 e0       	ldi	r17, 0x04	; 4
 380:	03 c0       	rjmp	.+6      	; 0x388 <main+0x1fe>
				{
					roll = midRoll;
				}
				
				pitch = midPitch + offset;
				highPitch = count;
 382:	51 e0       	ldi	r21, 0x01	; 1
				else
				{
					roll = midRoll;
				}
				
				pitch = midPitch + offset;
 384:	00 e2       	ldi	r16, 0x20	; 32
 386:	16 e0       	ldi	r17, 0x06	; 6
					roll = midRoll + offset;
					lowRoll --;
				}
				else
				{
					roll = midRoll;
 388:	f6 ec       	ldi	r31, 0xC6	; 198
 38a:	8f 2e       	mov	r8, r31
 38c:	f5 e0       	ldi	r31, 0x05	; 5
 38e:	9f 2e       	mov	r9, r31
 390:	06 c0       	rjmp	.+12     	; 0x39e <main+0x214>
				}
				
				if(highPitch)
				{
					pitch = midPitch - offset;
					highPitch --;
 392:	50 e0       	ldi	r21, 0x00	; 0
					roll = midRoll;
				}
				
				if(highPitch)
				{
					pitch = midPitch - offset;
 394:	0c ec       	ldi	r16, 0xCC	; 204
 396:	14 e0       	ldi	r17, 0x04	; 4
 398:	02 c0       	rjmp	.+4      	; 0x39e <main+0x214>
					pitch = midPitch + offset;
					lowPitch --;
				}
				else
				{
					pitch = midPitch;
 39a:	06 e7       	ldi	r16, 0x76	; 118
 39c:	15 e0       	ldi	r17, 0x05	; 5
		
		
		//*********************************************************
		//********************Write PWM Values*********************
		//*********************************************************
		TCCR0 |= (1 << CS00);
 39e:	83 b7       	in	r24, 0x33	; 51
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	83 bf       	out	0x33, r24	; 51
		
		PORTB |= 0b00000001;
 3a4:	c0 9a       	sbi	0x18, 0	; 24
		for(int i = 1; i <= ((throttle+calib) >> 4); i++)	//Throttle
 3a6:	c7 01       	movw	r24, r14
 3a8:	84 55       	subi	r24, 0x54	; 84
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
 3ac:	e4 e0       	ldi	r30, 0x04	; 4
 3ae:	96 95       	lsr	r25
 3b0:	87 95       	ror	r24
 3b2:	ea 95       	dec	r30
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x224>
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <main+0x23e>
		{
			TCNT0 = 0x00;
 3bc:	12 be       	out	0x32, r1	; 50
			while(TCNT0 <= 3)
 3be:	e2 b7       	in	r30, 0x32	; 50
 3c0:	e4 30       	cpi	r30, 0x04	; 4
 3c2:	e8 f3       	brcs	.-6      	; 0x3be <main+0x234>
		//********************Write PWM Values*********************
		//*********************************************************
		TCCR0 |= (1 << CS00);
		
		PORTB |= 0b00000001;
		for(int i = 1; i <= ((throttle+calib) >> 4); i++)	//Throttle
 3c4:	2f 5f       	subi	r18, 0xFF	; 255
 3c6:	3f 4f       	sbci	r19, 0xFF	; 255
 3c8:	82 17       	cp	r24, r18
 3ca:	93 07       	cpc	r25, r19
 3cc:	b8 f7       	brcc	.-18     	; 0x3bc <main+0x232>
			TCNT0 = 0x00;
			while(TCNT0 <= 3)
			{
			}
		}
		PORTB &= 0b11111110;
 3ce:	c0 98       	cbi	0x18, 0	; 24
		
		
		PORTB |= 0b00000010;
 3d0:	c1 9a       	sbi	0x18, 1	; 24
		for(int i = 1; i <= ((roll+calib) >> 4); i++)	//Roll
 3d2:	c4 01       	movw	r24, r8
 3d4:	84 55       	subi	r24, 0x54	; 84
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	34 e0       	ldi	r19, 0x04	; 4
 3da:	96 95       	lsr	r25
 3dc:	87 95       	ror	r24
 3de:	3a 95       	dec	r19
 3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0x250>
 3e2:	21 e0       	ldi	r18, 0x01	; 1
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	06 c0       	rjmp	.+12     	; 0x3f4 <main+0x26a>
		{
			TCNT0 = 0x00;
 3e8:	12 be       	out	0x32, r1	; 50
			while(TCNT0 <= 3)
 3ea:	e2 b7       	in	r30, 0x32	; 50
 3ec:	e4 30       	cpi	r30, 0x04	; 4
 3ee:	e8 f3       	brcs	.-6      	; 0x3ea <main+0x260>
		}
		PORTB &= 0b11111110;
		
		
		PORTB |= 0b00000010;
		for(int i = 1; i <= ((roll+calib) >> 4); i++)	//Roll
 3f0:	2f 5f       	subi	r18, 0xFF	; 255
 3f2:	3f 4f       	sbci	r19, 0xFF	; 255
 3f4:	82 17       	cp	r24, r18
 3f6:	93 07       	cpc	r25, r19
 3f8:	b8 f7       	brcc	.-18     	; 0x3e8 <main+0x25e>
			TCNT0 = 0x00;
			while(TCNT0 <= 3)
			{
			}
		}
		PORTB &= 0b11111101;
 3fa:	c1 98       	cbi	0x18, 1	; 24
		
		
		PORTB |= 0b00000100;
 3fc:	c2 9a       	sbi	0x18, 2	; 24
		for(int i = 1; i <= ((pitch+calib) >> 4); i++)	//Pitch
 3fe:	c8 01       	movw	r24, r16
 400:	84 55       	subi	r24, 0x54	; 84
 402:	9f 4f       	sbci	r25, 0xFF	; 255
 404:	24 e0       	ldi	r18, 0x04	; 4
 406:	96 95       	lsr	r25
 408:	87 95       	ror	r24
 40a:	2a 95       	dec	r18
 40c:	e1 f7       	brne	.-8      	; 0x406 <main+0x27c>
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	06 c0       	rjmp	.+12     	; 0x420 <main+0x296>
		{
			TCNT0 = 0x00;
 414:	12 be       	out	0x32, r1	; 50
			while(TCNT0 <= 3)
 416:	e2 b7       	in	r30, 0x32	; 50
 418:	e4 30       	cpi	r30, 0x04	; 4
 41a:	e8 f3       	brcs	.-6      	; 0x416 <main+0x28c>
		}
		PORTB &= 0b11111101;
		
		
		PORTB |= 0b00000100;
		for(int i = 1; i <= ((pitch+calib) >> 4); i++)	//Pitch
 41c:	2f 5f       	subi	r18, 0xFF	; 255
 41e:	3f 4f       	sbci	r19, 0xFF	; 255
 420:	82 17       	cp	r24, r18
 422:	93 07       	cpc	r25, r19
 424:	b8 f7       	brcc	.-18     	; 0x414 <main+0x28a>
			TCNT0 = 0x00;
			while(TCNT0 <= 3)
			{
			}
		}
		PORTB &= 0b11111011;
 426:	c2 98       	cbi	0x18, 2	; 24
		
		
		PORTB |= 0b00001000;
 428:	c3 9a       	sbi	0x18, 3	; 24
		for(int i = 1; i <= ((yaw+calib) >> 4); i++)	//Yaw
 42a:	89 e6       	ldi	r24, 0x69	; 105
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	04 c0       	rjmp	.+8      	; 0x438 <main+0x2ae>
		{
			TCNT0 = 0x00;
 430:	12 be       	out	0x32, r1	; 50
			while(TCNT0 <= 3)
 432:	22 b7       	in	r18, 0x32	; 50
 434:	24 30       	cpi	r18, 0x04	; 4
 436:	e8 f3       	brcs	.-6      	; 0x432 <main+0x2a8>
 438:	01 97       	sbiw	r24, 0x01	; 1
		}
		PORTB &= 0b11111011;
		
		
		PORTB |= 0b00001000;
		for(int i = 1; i <= ((yaw+calib) >> 4); i++)	//Yaw
 43a:	d1 f7       	brne	.-12     	; 0x430 <main+0x2a6>
			TCNT0 = 0x00;
			while(TCNT0 <= 3)
			{
			}
		}
		PORTB &= 0b11110111;
 43c:	c3 98       	cbi	0x18, 3	; 24
		
		
		PORTB |= 0b00010000;
 43e:	c4 9a       	sbi	0x18, 4	; 24
		for(int i = 1; i <= ((aux1+calib) >> 4); i++)	//Aux1
 440:	8a e4       	ldi	r24, 0x4A	; 74
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	04 c0       	rjmp	.+8      	; 0x44e <main+0x2c4>
		{
			TCNT0 = 0x00;
 446:	12 be       	out	0x32, r1	; 50
			while(TCNT0 <= 3)
 448:	22 b7       	in	r18, 0x32	; 50
 44a:	24 30       	cpi	r18, 0x04	; 4
 44c:	e8 f3       	brcs	.-6      	; 0x448 <main+0x2be>
 44e:	01 97       	sbiw	r24, 0x01	; 1
		}
		PORTB &= 0b11110111;
		
		
		PORTB |= 0b00010000;
		for(int i = 1; i <= ((aux1+calib) >> 4); i++)	//Aux1
 450:	d1 f7       	brne	.-12     	; 0x446 <main+0x2bc>
			TCNT0 = 0x00;
			while(TCNT0 <= 3)
			{
			}
		}
		PORTB &= 0b11101111;
 452:	c4 98       	cbi	0x18, 4	; 24
	
	while(1)
	{	
		_delay_ms(25);
		
		altitude = US_Read_ADC();
 454:	56 01       	movw	r10, r12
		}
		PORTB &= 0b11101111;
		//*********************************************************
		//**********************End PWM Write**********************
		//*********************************************************
	}
 456:	d3 ce       	rjmp	.-602    	; 0x1fe <main+0x74>

00000458 <IR_init>:
		ADCSRA |= (1<<ADSC);	//Set ADC flag
		while(ADCSRA & (1<<ADSC));	//Wait for ADC flag
		adc_result += ADC;
	}
	return(adc_result /= poll_factor);
}
 458:	80 e4       	ldi	r24, 0x40	; 64
 45a:	87 b9       	out	0x07, r24	; 7
 45c:	87 e8       	ldi	r24, 0x87	; 135
 45e:	86 b9       	out	0x06, r24	; 6
 460:	08 95       	ret

00000462 <Obstacle_Detect>:

char Obstacle_Detect(void)
{
 462:	df 92       	push	r13
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	28 97       	sbiw	r28, 0x08	; 8
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	f8 94       	cli
 47a:	de bf       	out	0x3e, r29	; 62
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	cd bf       	out	0x3d, r28	; 61
	int poll_factor = 3;
	uint16_t adc_result[4] = {0,0,0,0};
 480:	fe 01       	movw	r30, r28
 482:	31 96       	adiw	r30, 0x01	; 1
 484:	88 e0       	ldi	r24, 0x08	; 8
 486:	df 01       	movw	r26, r30
 488:	1d 92       	st	X+, r1
 48a:	8a 95       	dec	r24
 48c:	e9 f7       	brne	.-6      	; 0x488 <Obstacle_Detect+0x26>
 48e:	8f 01       	movw	r16, r30
 490:	d1 2c       	mov	r13, r1
	uint8_t result = 0;
	for(int i = 0; i <= 3; i++)
	{
		ADMUX = (ADMUX & 0xF8) | i;
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	e8 2e       	mov	r14, r24
 496:	f1 2c       	mov	r15, r1
 498:	87 b1       	in	r24, 0x07	; 7
 49a:	88 7f       	andi	r24, 0xF8	; 248
 49c:	8d 29       	or	r24, r13
 49e:	87 b9       	out	0x07, r24	; 7
 4a0:	23 e0       	ldi	r18, 0x03	; 3
 4a2:	30 e0       	ldi	r19, 0x00	; 0
		for(int j = 1; j <= poll_factor; j++)
		{
			ADCSRA |= (1<<ADSC);
 4a4:	36 9a       	sbi	0x06, 6	; 6
			while(ADCSRA & (1<<ADSC));
 4a6:	36 99       	sbic	0x06, 6	; 6
 4a8:	fe cf       	rjmp	.-4      	; 0x4a6 <Obstacle_Detect+0x44>
			adc_result[i] += ADC;
 4aa:	84 b1       	in	r24, 0x04	; 4
 4ac:	95 b1       	in	r25, 0x05	; 5
 4ae:	40 81       	ld	r20, Z
 4b0:	51 81       	ldd	r21, Z+1	; 0x01
 4b2:	84 0f       	add	r24, r20
 4b4:	95 1f       	adc	r25, r21
 4b6:	91 83       	std	Z+1, r25	; 0x01
 4b8:	80 83       	st	Z, r24
 4ba:	21 50       	subi	r18, 0x01	; 1
 4bc:	31 09       	sbc	r19, r1
	uint16_t adc_result[4] = {0,0,0,0};
	uint8_t result = 0;
	for(int i = 0; i <= 3; i++)
	{
		ADMUX = (ADMUX & 0xF8) | i;
		for(int j = 1; j <= poll_factor; j++)
 4be:	91 f7       	brne	.-28     	; 0x4a4 <Obstacle_Detect+0x42>
		{
			ADCSRA |= (1<<ADSC);
			while(ADCSRA & (1<<ADSC));
			adc_result[i] += ADC;
		}
		adc_result[i] /= poll_factor;
 4c0:	b7 01       	movw	r22, r14
 4c2:	7b d0       	rcall	.+246    	; 0x5ba <__udivmodhi4>
 4c4:	61 93       	st	Z+, r22
 4c6:	71 93       	st	Z+, r23
 4c8:	d3 94       	inc	r13
char Obstacle_Detect(void)
{
	int poll_factor = 3;
	uint16_t adc_result[4] = {0,0,0,0};
	uint8_t result = 0;
	for(int i = 0; i <= 3; i++)
 4ca:	b4 e0       	ldi	r27, 0x04	; 4
 4cc:	db 12       	cpse	r13, r27
 4ce:	e4 cf       	rjmp	.-56     	; 0x498 <Obstacle_Detect+0x36>
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	80 e0       	ldi	r24, 0x00	; 0
	}
	for(int i = 0; i <= 3; i++)
	{
		if(adc_result[i] >= maxDist)
		{
			result |= 1 << i;
 4d6:	41 e0       	ldi	r20, 0x01	; 1
 4d8:	50 e0       	ldi	r21, 0x00	; 0
		}
		adc_result[i] /= poll_factor;
	}
	for(int i = 0; i <= 3; i++)
	{
		if(adc_result[i] >= maxDist)
 4da:	f8 01       	movw	r30, r16
 4dc:	61 91       	ld	r22, Z+
 4de:	71 91       	ld	r23, Z+
 4e0:	8f 01       	movw	r16, r30
 4e2:	63 37       	cpi	r22, 0x73	; 115
 4e4:	71 05       	cpc	r23, r1
 4e6:	38 f0       	brcs	.+14     	; 0x4f6 <Obstacle_Detect+0x94>
		{
			result |= 1 << i;
 4e8:	ba 01       	movw	r22, r20
 4ea:	02 2e       	mov	r0, r18
 4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <Obstacle_Detect+0x8e>
 4ee:	66 0f       	add	r22, r22
 4f0:	0a 94       	dec	r0
 4f2:	ea f7       	brpl	.-6      	; 0x4ee <Obstacle_Detect+0x8c>
 4f4:	86 2b       	or	r24, r22
			while(ADCSRA & (1<<ADSC));
			adc_result[i] += ADC;
		}
		adc_result[i] /= poll_factor;
	}
	for(int i = 0; i <= 3; i++)
 4f6:	2f 5f       	subi	r18, 0xFF	; 255
 4f8:	3f 4f       	sbci	r19, 0xFF	; 255
 4fa:	24 30       	cpi	r18, 0x04	; 4
 4fc:	31 05       	cpc	r19, r1
 4fe:	69 f7       	brne	.-38     	; 0x4da <Obstacle_Detect+0x78>
		{
			result |= 1 << i;
		}
	}
	return result;
 500:	28 96       	adiw	r28, 0x08	; 8
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	1f 91       	pop	r17
 512:	0f 91       	pop	r16
 514:	ff 90       	pop	r15
 516:	ef 90       	pop	r14
 518:	df 90       	pop	r13
 51a:	08 95       	ret

0000051c <UART_init>:
{
	//while(!(UCSRA & (1 << UDRE)));
	while((UCSRA && 0x20) == 0);
	UDR = c; 
	//while(!(UCSRA & (1 << TXC)));
	while(UCSRA && 0x40 == 0);
 51c:	29 2f       	mov	r18, r25
 51e:	33 27       	eor	r19, r19
 520:	27 fd       	sbrc	r18, 7
 522:	3a 95       	dec	r19
 524:	20 bd       	out	0x20, r18	; 32
 526:	89 b9       	out	0x09, r24	; 9
 528:	88 e9       	ldi	r24, 0x98	; 152
 52a:	8a b9       	out	0x0a, r24	; 10
 52c:	86 e8       	ldi	r24, 0x86	; 134
 52e:	80 bd       	out	0x20, r24	; 32
 530:	59 9a       	sbi	0x0b, 1	; 11
 532:	08 95       	ret

00000534 <UART_ReadChar>:
}

unsigned char UART_ReadChar(void)
{
	while(!(UCSRA & (1 << RXC)));
 534:	5f 9b       	sbis	0x0b, 7	; 11
 536:	fe cf       	rjmp	.-4      	; 0x534 <UART_ReadChar>
	return UDR;
 538:	8c b1       	in	r24, 0x0c	; 12
 53a:	08 95       	ret

0000053c <__vector_13>:
	LCD_Shift(Cur_Shift, Left_Cur, 3);
	
	//PORTD &= 0b11111011;
	
	return (US_Data[2] - '0') + (10 * (US_Data[1] - '0')) + (100 * (US_Data[0] - '0'));
}
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	2f 93       	push	r18
 548:	3f 93       	push	r19
 54a:	4f 93       	push	r20
 54c:	5f 93       	push	r21
 54e:	6f 93       	push	r22
 550:	7f 93       	push	r23
 552:	8f 93       	push	r24
 554:	9f 93       	push	r25
 556:	af 93       	push	r26
 558:	bf 93       	push	r27
 55a:	ef 93       	push	r30
 55c:	ff 93       	push	r31
 55e:	ea df       	rcall	.-44     	; 0x534 <UART_ReadChar>
 560:	82 35       	cpi	r24, 0x52	; 82
 562:	e9 f7       	brne	.-6      	; 0x55e <__vector_13+0x22>
 564:	e7 df       	rcall	.-50     	; 0x534 <UART_ReadChar>
 566:	e6 df       	rcall	.-52     	; 0x534 <UART_ReadChar>
 568:	e5 df       	rcall	.-54     	; 0x534 <UART_ReadChar>
 56a:	ff 91       	pop	r31
 56c:	ef 91       	pop	r30
 56e:	bf 91       	pop	r27
 570:	af 91       	pop	r26
 572:	9f 91       	pop	r25
 574:	8f 91       	pop	r24
 576:	7f 91       	pop	r23
 578:	6f 91       	pop	r22
 57a:	5f 91       	pop	r21
 57c:	4f 91       	pop	r20
 57e:	3f 91       	pop	r19
 580:	2f 91       	pop	r18
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <US_Read_ADC>:
int US_Read_ADC()
{
	int poll_factor = 3;
	int adc_result = 0;
	
	ADMUX = (ADMUX & 0xF8)|0x05; //Define ADC channel (maybe 0xF8?)
 58c:	87 b1       	in	r24, 0x07	; 7
 58e:	88 7f       	andi	r24, 0xF8	; 248
 590:	85 60       	ori	r24, 0x05	; 5
 592:	87 b9       	out	0x07, r24	; 7
 594:	23 e0       	ldi	r18, 0x03	; 3
 596:	30 e0       	ldi	r19, 0x00	; 0
}

int US_Read_ADC()
{
	int poll_factor = 3;
	int adc_result = 0;
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
	
	ADMUX = (ADMUX & 0xF8)|0x05; //Define ADC channel (maybe 0xF8?)
	
	for(int i=1;i<=poll_factor;i++)
	{
		ADCSRA |= (1<<ADSC);	//Set ADC flag
 59c:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1<<ADSC));	//Wait for ADC flag
 59e:	36 99       	sbic	0x06, 6	; 6
 5a0:	fe cf       	rjmp	.-4      	; 0x59e <US_Read_ADC+0x12>
		adc_result += ADC;
 5a2:	44 b1       	in	r20, 0x04	; 4
 5a4:	55 b1       	in	r21, 0x05	; 5
 5a6:	84 0f       	add	r24, r20
 5a8:	95 1f       	adc	r25, r21
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	31 09       	sbc	r19, r1
	int poll_factor = 3;
	int adc_result = 0;
	
	ADMUX = (ADMUX & 0xF8)|0x05; //Define ADC channel (maybe 0xF8?)
	
	for(int i=1;i<=poll_factor;i++)
 5ae:	b1 f7       	brne	.-20     	; 0x59c <US_Read_ADC+0x10>
	{
		ADCSRA |= (1<<ADSC);	//Set ADC flag
		while(ADCSRA & (1<<ADSC));	//Wait for ADC flag
		adc_result += ADC;
	}
	adc_result = (adc_result/poll_factor);
 5b0:	63 e0       	ldi	r22, 0x03	; 3
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	16 d0       	rcall	.+44     	; 0x5e2 <__divmodhi4>
 5b6:	cb 01       	movw	r24, r22
	return(adc_result);
 5b8:	08 95       	ret

000005ba <__udivmodhi4>:
 5ba:	aa 1b       	sub	r26, r26
 5bc:	bb 1b       	sub	r27, r27
 5be:	51 e1       	ldi	r21, 0x11	; 17
 5c0:	07 c0       	rjmp	.+14     	; 0x5d0 <__udivmodhi4_ep>

000005c2 <__udivmodhi4_loop>:
 5c2:	aa 1f       	adc	r26, r26
 5c4:	bb 1f       	adc	r27, r27
 5c6:	a6 17       	cp	r26, r22
 5c8:	b7 07       	cpc	r27, r23
 5ca:	10 f0       	brcs	.+4      	; 0x5d0 <__udivmodhi4_ep>
 5cc:	a6 1b       	sub	r26, r22
 5ce:	b7 0b       	sbc	r27, r23

000005d0 <__udivmodhi4_ep>:
 5d0:	88 1f       	adc	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	5a 95       	dec	r21
 5d6:	a9 f7       	brne	.-22     	; 0x5c2 <__udivmodhi4_loop>
 5d8:	80 95       	com	r24
 5da:	90 95       	com	r25
 5dc:	bc 01       	movw	r22, r24
 5de:	cd 01       	movw	r24, r26
 5e0:	08 95       	ret

000005e2 <__divmodhi4>:
 5e2:	97 fb       	bst	r25, 7
 5e4:	07 2e       	mov	r0, r23
 5e6:	16 f4       	brtc	.+4      	; 0x5ec <__divmodhi4+0xa>
 5e8:	00 94       	com	r0
 5ea:	06 d0       	rcall	.+12     	; 0x5f8 <__divmodhi4_neg1>
 5ec:	77 fd       	sbrc	r23, 7
 5ee:	08 d0       	rcall	.+16     	; 0x600 <__divmodhi4_neg2>
 5f0:	e4 df       	rcall	.-56     	; 0x5ba <__udivmodhi4>
 5f2:	07 fc       	sbrc	r0, 7
 5f4:	05 d0       	rcall	.+10     	; 0x600 <__divmodhi4_neg2>
 5f6:	3e f4       	brtc	.+14     	; 0x606 <__divmodhi4_exit>

000005f8 <__divmodhi4_neg1>:
 5f8:	90 95       	com	r25
 5fa:	81 95       	neg	r24
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	08 95       	ret

00000600 <__divmodhi4_neg2>:
 600:	70 95       	com	r23
 602:	61 95       	neg	r22
 604:	7f 4f       	sbci	r23, 0xFF	; 255

00000606 <__divmodhi4_exit>:
 606:	08 95       	ret

00000608 <_exit>:
 608:	f8 94       	cli

0000060a <__stop_program>:
 60a:	ff cf       	rjmp	.-2      	; 0x60a <__stop_program>
